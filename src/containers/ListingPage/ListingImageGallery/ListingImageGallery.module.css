@import "../../../styles/customMediaQueries.css";

:global(.image-gallery-thumbnails-container) {
	text-align: left !important;
}

:global(.image-gallery-thumbnails) {
	/*
   By default, the gallery controls the scroll position of the thumbnails when
   browsing the images. We change this logic to a freely scrollable container
   that the user controls. This overflow works together with the
   `disableThumbnailScroll` option in the component JS.
   */
	width: 100vw;
	padding-top: 24px;
	padding-bottom: 0;
	overflow: auto;

	@media (--viewportMedium) {
		width: calc(100vw - 48px);
	}

	@media (--viewportLarge) {
		width: unset;
	}
}

:global(.image-gallery-thumbnail) {
	width: auto;
	text-align: left !important;
	border-radius: 8px;

	&:first-child {
		margin-left: 24px;

		@media (--viewportMedium) {
			margin-left: 0;
		}
	}

	&:last-child {
		margin-right: 24px;

		@media (--viewportMedium) {
			margin-right: 0;
		}
	}

	&:hover,
	&:global(.active) {
		border-color: var(--marketplaceColor);
	}
}

:global(.image-gallery-slide-wrapper) {
	background-color: var(--colorWhite);
	border-bottom: 1px solid var(--colorGrey100);

	@media (--viewportMedium) {
		border: 1px solid var(--colorGrey100);
		border-radius: var(--borderRadiusMedium);
	}
}

:global(.fullscreen) {
	background-color: var(--colorWhite) !important;

	& :global(.image-gallery-slide-wrapper) {
		background-color: transparent;
		border: none;
	}

	& :global(.image-gallery-thumbnails-container),
	& :global(.image-gallery-thumbnail) {
		text-align: center !important;
	}
}

.root {
}

.itemWrapper,
.itemWrapperFullscreen {
	display: flex;
	align-items: center;
	justify-content: center;
}

.itemWrapper {
}

.noImage {
	border: 1px solid var(--colorGrey100);
	border-radius: var(--borderRadiusMedium);
}

.itemWrapperFullscreen {
	height: calc(100vh - 130px);
}

.itemCentering {
	display: flex;
	align-items: center;
	justify-content: center;
	width: 100%;
	height: 100%;
}

.item {
	max-width: 100%;
	max-height: 100%;
}

.thumb {
	/* With the active thumbnail border (default 4px), make the result
   height a multiple of the baseline. */
	max-width: 88px;
	max-height: 88px;
	border-radius: var(--borderRadiusMedium);
}

.navLeft,
.navRight {
	position: absolute;
	z-index: 1;

	/* center content */
	display: flex;
	align-items: center;
	justify-content: center;
	width: 60px;
	height: 100%;
	padding: 0;
	border: 0;

	&:hover {
		cursor: pointer;

		& .navArrowWrapper {
			background-color: rgb(255 255 255 / 100%);
		}
	}
}

.navLeft {
	left: 0;

	& .navArrowWrapper {
		padding-right: 2px;
	}
}

.navRight {
	right: 0;

	& .navArrowWrapper {
		padding-left: 2px;
	}
}

.navArrowWrapper {
	display: none;
	width: 40px;
	height: 40px;
	background-color: rgb(255 255 255 / 50%);
	border-radius: 50%;

	@media (--viewportLarge) {
		/* center content */
		display: flex;
		align-items: center;
		justify-content: center;
	}
}

.openFullscreen {
	composes: marketplaceTinyFontStyles from global;

	/* Position and dimensions */
	position: absolute;
	right: 24px;
	bottom: 19px;

	/* Ensure the button is on top of the navRight area */
	z-index: 1;

	/* Hide on mobile. Currently react-image-gallery fullscreen mode is broken on
     mobile, and mobile doesn't really benefit from fullscreen anyways. */
	display: none;
	padding: 8px 13px 6px;
	margin: 0;
	font-weight: var(--fontWeightMedium);
	cursor: pointer;

	/* Colors */
	background-color: var(--colorWhite);

	/* Borders */
	border: 1px solid var(--colorGrey100);
	border-radius: var(--borderRadius);
	transition: var(--transitionStyleButton);

	&:hover {
		color: var(--colorWhite);
		background-color: var(--marketplaceColor);
		border-color: var(--marketplaceColor);
	}

	@media (--viewportLarge) {
		display: block;
	}
}

.close {
	composes: marketplaceModalCloseStyles from global;
	color: var(--colorGrey300);
	transition: var(--transitionStyleButton);

	&:enabled:hover,
	&:enabled:active {
		color: var(--colorBlack);
	}
}

.closeText {
	composes: marketplaceModalCloseText from global;
}

.closeIcon {
	composes: marketplaceModalCloseIcon from global;
}
