@import "../../styles/customMediaQueries.css";

/* Content is visible as modal layer */
.isOpen {
	z-index: 100;
	width: 100%;

	/* scrollLayer is the .root for the Modal */
	& .scrollLayer {
		display: flex;
		flex-grow: 1;

		/* Additional styles for the modal window, dimming the background and positioning the modal */
		min-height: 100vh;
		overflow: auto;

		/* Add default background color to avoid bouncing scroll showing the
   page contents from behind the modal. */
		background-color: var(--colorWhite);
		-webkit-overflow-scrolling: touch;

		@media (--viewportMedium) {
			align-items: flex-start;
			justify-content: center;
			padding: 0;
			background-color: rgb(0 0 0 / 40%);
			background-image: none;
		}
	}

	& .container {
		/* Create context so the close button can be positioned within it */
		position: relative;

		/* Display and dimensions */
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		height: 100%;
		min-height: 100vh;
		padding: var(--modalPadding);
		background-color: var(--colorWhite);
		border-bottom: none;
		border-radius: var(--borderRadius);

		@media (--viewportMedium) {
			flex-basis: 576px;
			flex-grow: 0;
			height: auto;
			min-height: auto;
			padding: var(--modalPaddingMedium);
			margin-top: 12.5vh;
			margin-bottom: 12.5vh;
			border-bottom: 8px solid var(--marketplaceColor);
		}
	}
}

.isOpenInPlace {
	composes: isopen;
	position: fixed;
	inset: 0;
	display: flex;
	flex-direction: column;
}

.isOpenInPortal {
	composes: isopen;
	position: absolute;
	display: block;
	height: calc(var(--vh, 1vh) * 100);

	@media (--viewportMedium) {
		position: fixed;
		inset: 0;
		display: flex;
		flex-direction: column;
	}
}

.content {
}

/* Content is explicitly hidden (this default can be overridden with passed-in class) */

/* The use case for having both .isOpen and .isClosed is ModalInMobile use case       */

/* where desktop layout should not get any styling from Modal component.              */
.isClosed {
	display: none;
}

.close {
	composes: marketplacemodalclosestyles from global;
}

.closeText {
	composes: marketplacemodalclosetext from global;
}

.closeIcon {
	composes: marketplacemodalcloseicon from global;
}

.closeLight {
	color: var(--colorGrey300);
	transition: var(--transitionStyleButton);

	&:enabled:hover,
	&:enabled:active {
		color: var(--colorWhite);
	}
}

.focusedDiv {
	&:focus {
		outline: none;
	}
}
